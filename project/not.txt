
Phân tích sự phù hợp của mã nguồn với đề tài "Gửi báo cáo công ty qua Server trung gian"
Để xác định xem các file mã nguồn bạn cung cấp có phù hợp với đề tài "Gửi báo cáo công ty qua Server trung gian" hay không, tôi sẽ so sánh các yêu cầu kỹ thuật và luồng xử lý được mô tả trong đề tài với các thành phần trong mã nguồn. Dựa trên các file bạn cung cấp (app_receiver.py, app_sender.py, generate_keys.py, server1.py, server2.py, shared.py, index_receiver.html, index.html), tôi sẽ tiến hành phân tích chi tiết.

1. Phân tích yêu cầu kỹ thuật
Mã hóa: AES-GCM:
Trong shared.py, hàm aes_gcm_encrypt sử dụng AES-GCM để mã hóa file với nonce 12 byte, tạo ra ciphertext và tag, phù hợp với yêu cầu.
Hàm aes_gcm_decrypt trong app_receiver.py giải mã ciphertext bằng AES-GCM, kiểm tra tag để đảm bảo tính toàn vẹn.
Kết luận: Đáp ứng.
Trao khóa & ký số: RSA 1024-bit (OAEP + SHA-512):
Trong shared.py, hàm encrypt_rsa sử dụng RSA với OAEP để mã hóa session key, và sign_message sử dụng RSA với SHA-512 để ký số.
generate_keys.py (dù hiện tại là HTML, cần sửa thành Python để tạo khóa RSA 1024-bit) được giả định tạo khóa RSA, nhưng cần kiểm tra kích thước khóa (1024-bit).
Trong app_sender.py, session key được mã hóa bằng khóa công khai của Receiver, và metadata được ký bằng khóa riêng của Sender.
Kết luận: Đáp ứng, nhưng cần đảm bảo generate_keys.py tạo khóa 1024-bit (chưa kiểm tra do lỗi định dạng file).
Kiểm tra tính toàn vẹn: SHA-512:
Hàm compute_integrity_hash trong shared.py sử dụng SHA-512 để tính hash từ nonce, ciphertext, và tag, đúng với yêu cầu.
app_receiver.py kiểm tra hash tính toán và hash nhận được để xác minh tính toàn vẹn.
Kết luận: Đáp ứng.
Lưu log: Thời gian giao dịch:
shared.py có hàm log_event ghi log với timestamp, được sử dụng trong app_sender.py, app_receiver.py, server1.py, và server2.py.
Log bao gồm các sự kiện như handshake, gửi/nhận dữ liệu, và xác nhận, phù hợp với yêu cầu lưu thời gian giao dịch.
Kết luận: Đáp ứng.
2. Phân tích luồng xử lý
Bước 1: Handshake:
app_sender.py gửi "Hello!" qua Server trung gian (server1.py -> server2.py -> app_receiver.py), và app_receiver.py trả lời "Ready!", đúng với mô tả.
Server trung gian (server1.py, server2.py) chỉ chuyển tiếp dữ liệu và ghi log, không tham gia mã hóa/giải mã.
Kết luận: Đáp ứng.
Bước 2: Xác thực & Trao khóa:
app_sender.py tạo metadata (tên file, timestamp, transaction_id) và ký bằng RSA/SHA-512.
Session key được mã hóa bằng RSA OAEP và gửi trong gói tin JSON.
app_receiver.py xác minh chữ ký metadata và giải mã session key bằng khóa riêng.
Kết luận: Đáp ứng.
Bước 3: Mã hóa & Kiểm tra toàn vẹn:
app_sender.py tạo nonce, mã hóa file bằng AES-GCM, tính hash SHA-512, và gửi gói tin với cấu trúc:
"nonce": "<Base64>", "cipher": "<Base64>", "tag": "<Base64>", "hash": "<hex>", "sig": "<Signature>" (cùng với các trường bổ sung như encrypted_key, metadata, metadata_sig).
Kết luận: Đáp ứng, dù có thêm các trường bổ sung không bắt buộc trong đề tài (như encrypted_key, metadata_sig), điều này tăng cường bảo mật.
Bước 4: Phía Người nhận:
app_receiver.py kiểm tra hash, chữ ký, và tag. Nếu hợp lệ, giải mã file, lưu report.txt, và gửi ACK. Nếu không, gửi NACK với lý do cụ thể.
Server trung gian ghi log thời gian chuyển tiếp.
Kết luận: Đáp ứng.
3. Lỗi và sai sót trong mã nguồn
Lỗi định dạng generate_keys.py:
File hiện tại là HTML (index_receiver.html), trong khi nó cần là Python để tạo khóa RSA. Điều này là lỗi nghiêm trọng, vì hệ thống phụ thuộc vào khóa để hoạt động.
Hành động cần thiết: Sửa lại generate_keys.py thành file Python để tạo khóa RSA 1024-bit.
Giao diện không khớp:
index_receiver.html và index.html được thiết kế tốt với giao diện người dùng, nhưng cấu trúc HTML trong tài liệu của bạn bị hỏng (thiếu thẻ đóng hoặc định dạng không đầy đủ). Tuy nhiên, dựa trên phiên bản trước đã cung cấp, giao diện phù hợp với đề tài (hiển thị trạng thái gửi/nhận).
Hành động cần thiết: Sửa lại định dạng HTML trong tài liệu.
Tối ưu hóa log:
Log hiện tại ghi chi tiết, nhưng cần đảm bảo tất cả các bước (khởi tạo, chuyển tiếp, xác nhận) đều có timestamp rõ ràng.
4. Kết luận về sự phù hợp
Mã nguồn phù hợp với đề tài "Gửi báo cáo công ty qua Server trung gian" về mặt kỹ thuật (mã hóa AES-GCM, RSA OAEP/SHA-512, kiểm tra toàn vẹn, lưu log thời gian) và luồng xử lý.
Tuy nhiên, có sai sót cần sửa:
Định dạng sai của generate_keys.py (cần chuyển từ HTML sang Python).
Cấu trúc HTML trong tài liệu bị lỗi (cần chỉnh sửa).
Sau khi sửa các lỗi trên, mã nguồn sẽ hoàn toàn đáp ứng yêu cầu đề tài.
Bài báo cáo hoàn chỉnh
BÁO CÁO PHÂN TÍCH HỆ THỐNG GỬI BÁO CÁO CÔNG TY QUA SERVER TRUNG GIAN
1. Giới thiệu
Hệ thống "Gửi báo cáo công ty qua Server trung gian" được thiết kế để truyền tải an toàn file report.txt từ công ty (Người gửi) đến đối tác (Người nhận) thông qua một Server trung gian. Hệ thống áp dụng các kỹ thuật mã hóa hiện đại và kiểm tra tính toàn vẹn để đảm bảo bảo mật và độ tin cậy. Báo cáo này phân tích sự phù hợp của mã nguồn với yêu cầu đề tài, bao gồm các khía cạnh kỹ thuật và luồng xử lý.

2. Yêu cầu kỹ thuật
Mã hóa: Sử dụng AES-GCM để mã hóa file, tạo ciphertext và tag, đảm bảo bảo mật dữ liệu.
Trao đổi khóa và ký số: Áp dụng RSA 1024-bit với OAEP cho trao đổi khóa và SHA-512 cho ký số, đảm bảo tính xác thực.
Kiểm tra tính toàn vẹn: Sử dụng SHA-512 để tính hash từ nonce, ciphertext, và tag, kiểm tra tính nguyên vẹn của dữ liệu.
Lưu log: Ghi lại thời gian giao dịch tại tất cả các thành phần (Người gửi, Server trung gian, Người nhận).
3. Phân tích luồng xử lý
Bước 1: Handshake:
Người gửi khởi tạo bằng cách gửi "Hello!" qua Server trung gian.
Người nhận phản hồi "Ready!" sau khi nhận tín hiệu.
Server trung gian chỉ chuyển tiếp dữ liệu và ghi log thời gian, không tham gia mã hóa.
Bước 2: Xác thực & Trao khóa:
Người gửi tạo metadata (tên file, timestamp, ID giao dịch) và ký bằng RSA/SHA-512.
Session key được mã hóa bằng RSA OAEP và gửi đến Người nhận.
Bước 3: Mã hóa & Kiểm tra toàn vẹn:
Tạo nonce ngẫu nhiên, mã hóa file bằng AES-GCM.
Tính hash SHA-512 từ nonce, ciphertext, và tag.
Gói tin được gửi với cấu trúc JSON bao gồm nonce, cipher, tag, hash, và chữ ký.
Bước 4: Xử lý phía Người nhận:
Kiểm tra hash, chữ ký, và tag. Nếu hợp lệ, giải mã file, lưu report.txt, và gửi ACK.
Nếu không hợp lệ, gửi NACK với lý do cụ thể.
Server trung gian ghi log thời gian chuyển tiếp.
4. Phân tích mã nguồn
Tệp app_sender.py: Thực hiện mã hóa AES-GCM, ký số RSA/SHA-512, và gửi gói tin qua Server trung gian. Ghi log thời gian giao dịch.
Tệp app_receiver.py: Giải mã file, kiểm tra tính toàn vẹn, và gửi ACK/NACK. Ghi log thành công hoặc lỗi.
Tệp server1.py và server2.py: Chuyển tiếp dữ liệu giữa Sender và Receiver, ghi log thời gian.
Tệp shared.py: Cung cấp các hàm mã hóa (AES-GCM, RSA OAEP), ký số (SHA-512), và tính hash, đáp ứng yêu cầu kỹ thuật.
Tệp index.html và index_receiver.html: Cung cấp giao diện người dùng để gửi và theo dõi trạng thái, phù hợp với trải nghiệm thực tế.
Tệp generate_keys.py: Hiện tại là HTML (lỗi định dạng), cần sửa thành Python để tạo khóa RSA 1024-bit.
5. Đánh giá sự phù hợp
Mã nguồn đáp ứng đầy đủ các yêu cầu kỹ thuật và luồng xử lý của đề tài.
Lỗi phát hiện:
generate_keys.py không phải là file Python, cần sửa để tạo khóa RSA 1024-bit.
Cấu trúc HTML trong tài liệu bị lỗi, cần định dạng lại.
Đề xuất cải thiện:
Đảm bảo generate_keys.py tạo khóa 1024-bit và kiểm tra kích thước.
Tối ưu hóa log để bao quát tất cả các bước giao dịch.
6. Kết luận
Mã nguồn cơ bản phù hợp với đề tài, nhưng cần sửa lỗi định dạng generate_keys.py và tối ưu hóa cấu trúc HTML. Sau khi khắc phục, hệ thống sẽ đáp ứng hoàn toàn yêu cầu "Gửi báo cáo công ty qua Server trung gian", đảm bảo bảo mật và độ tin cậy trong truyền tải dữ liệu.

7. Tài liệu tham khảo
Tài liệu đề tài "Nhập môn an toàn, bảo mật thông tin".
Thư viện mã hóa Python (pycryptodome).